// <auto-generated />
using System;
using DukandaCore.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DukandaCore.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250227001126_reviewGraficData")]
    partial class reviewGraficData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DukandaCore.Domain.Entities.AttractionImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TouristAttractionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TouristAttractionId");

                    b.ToTable("AttractionImages");
                });

            modelBuilder.Entity("DukandaCore.Domain.Entities.Banner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BannerTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uuid");

                    b.Property<string>("LinkUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BannerTypeId");

                    b.ToTable("Banner");
                });

            modelBuilder.Entity("DukandaCore.Domain.Entities.BannerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BannerType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Banner principal da página inicial",
                            DisplayOrder = 1,
                            Icon = "star",
                            Name = "Principal"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Banners promocionais",
                            DisplayOrder = 2,
                            Icon = "percent",
                            Name = "Promoção"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Banners de destaque nas categorias",
                            DisplayOrder = 3,
                            Icon = "spotlight",
                            Name = "Destaque"
                        });
                });

            modelBuilder.Entity("DukandaCore.Domain.Entities.Benefit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PackageId");

                    b.ToTable("Benefits");
                });

            modelBuilder.Entity("DukandaCore.Domain.Entities.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BookingStatusId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BookingStatusId");

                    b.HasIndex("PackageId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("DukandaCore.Domain.Entities.BookingStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BookingStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "#FFA500",
                            Description = "Reserva aguardando confirmação",
                            DisplayOrder = 1,
                            Icon = "clock",
                            Name = "Pendente"
                        },
                        new
                        {
                            Id = 2,
                            Color = "#008000",
                            Description = "Reserva confirmada",
                            DisplayOrder = 2,
                            Icon = "check",
                            Name = "Confirmado"
                        },
                        new
                        {
                            Id = 3,
                            Color = "#FF0000",
                            Description = "Reserva cancelada",
                            DisplayOrder = 3,
                            Icon = "x",
                            Name = "Cancelado"
                        },
                        new
                        {
                            Id = 4,
                            Color = "#0000FF",
                            Description = "Tour realizado",
                            DisplayOrder = 4,
                            Icon = "flag",
                            Name = "Concluído"
                        });
                });

            modelBuilder.Entity("DukandaCore.Domain.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Capital de Angola",
                            ImageUrl = "luanda.jpg",
                            Latitude = 0.0,
                            Longitude = 0.0,
                            Name = "Luanda"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Província costeira conhecida por suas praias",
                            ImageUrl = "benguela.jpg",
                            Latitude = 0.0,
                            Longitude = 0.0,
                            Name = "Benguela"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Província do planalto central",
                            ImageUrl = "huila.jpg",
                            Latitude = 0.0,
                            Longitude = 0.0,
                            Name = "Huíla"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Província do norte de Angola",
                            ImageUrl = "cabinda.jpg",
                            Latitude = 0.0,
                            Longitude = 0.0,
                            Name = "Cabinda"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Antiga Nova Lisboa",
                            ImageUrl = "huambo.jpg",
                            Latitude = 0.0,
                            Longitude = 0.0,
                            Name = "Huambo"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Terra das Quedas de Kalandula",
                            ImageUrl = "malanje.jpg",
                            Latitude = 0.0,
                            Longitude = 0.0,
                            Name = "Malanje"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Província do deserto do Namibe",
                            ImageUrl = "namibe.jpg",
                            Latitude = 0.0,
                            Longitude = 0.0,
                            Name = "Namibe"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Província histórica do norte",
                            ImageUrl = "zaire.jpg",
                            Latitude = 0.0,
                            Longitude = 0.0,
                            Name = "Zaire"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Terra do café",
                            ImageUrl = "uige.jpg",
                            Latitude = 0.0,
                            Longitude = 0.0,
                            Name = "Uíge"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Província do sul de Angola",
                            ImageUrl = "cunene.jpg",
                            Latitude = 0.0,
                            Longitude = 0.0,
                            Name = "Cunene"
                        },
                        new
                        {
                            Id = 11,
                            Description = "Província do planalto central",
                            ImageUrl = "bie.jpg",
                            Latitude = 0.0,
                            Longitude = 0.0,
                            Name = "Bié"
                        },
                        new
                        {
                            Id = 12,
                            Description = "A maior província de Angola",
                            ImageUrl = "cuando-cubango.jpg",
                            Latitude = 0.0,
                            Longitude = 0.0,
                            Name = "Cuando Cubango"
                        },
                        new
                        {
                            Id = 13,
                            Description = "Província histórica",
                            ImageUrl = "cuanza-norte.jpg",
                            Latitude = 0.0,
                            Longitude = 0.0,
                            Name = "Cuanza Norte"
                        },
                        new
                        {
                            Id = 14,
                            Description = "Terra do café robusta",
                            ImageUrl = "cuanza-sul.jpg",
                            Latitude = 0.0,
                            Longitude = 0.0,
                            Name = "Cuanza Sul"
                        },
                        new
                        {
                            Id = 15,
                            Description = "Província dos diamantes",
                            ImageUrl = "lunda-norte.jpg",
                            Latitude = 0.0,
                            Longitude = 0.0,
                            Name = "Lunda Norte"
                        },
                        new
                        {
                            Id = 16,
                            Description = "Província mineira",
                            ImageUrl = "lunda-sul.jpg",
                            Latitude = 0.0,
                            Longitude = 0.0,
                            Name = "Lunda Sul"
                        },
                        new
                        {
                            Id = 17,
                            Description = "A segunda maior província",
                            ImageUrl = "moxico.jpg",
                            Latitude = 0.0,
                            Longitude = 0.0,
                            Name = "Moxico"
                        },
                        new
                        {
                            Id = 18,
                            Description = "Província próxima à capital",
                            ImageUrl = "bengo.jpg",
                            Latitude = 0.0,
                            Longitude = 0.0,
                            Name = "Bengo"
                        });
                });

            modelBuilder.Entity("DukandaCore.Domain.Entities.Package", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<Guid>("TourId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TourId");

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("DukandaCore.Domain.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uuid");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TourAgencyId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TourId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TouristAttractionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TourAgencyId");

                    b.HasIndex("TourId");

                    b.HasIndex("TouristAttractionId");

                    b.HasIndex("UserId");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("DukandaCore.Domain.Entities.TodoItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<bool>("Done")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uuid");

                    b.Property<int>("ListId")
                        .HasColumnType("integer");

                    b.Property<Guid>("ListId1")
                        .HasColumnType("uuid");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Reminder")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("ListId1");

                    b.ToTable("TodoItem");
                });

            modelBuilder.Entity("DukandaCore.Domain.Entities.TodoList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("TodoList");
                });

            modelBuilder.Entity("DukandaCore.Domain.Entities.Tour", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AgencyId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("numeric");

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<string>("CoverImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("PublishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("PublishedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("CityId");

                    b.HasIndex("PublishedById");

                    b.ToTable("Tours");
                });

            modelBuilder.Entity("DukandaCore.Domain.Entities.TourAgency", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TourAgencyTypeId")
                        .HasColumnType("integer");

                    b.HasKey("UserId");

                    b.HasIndex("TourAgencyTypeId");

                    b.ToTable("TourAgencies");
                });

            modelBuilder.Entity("DukandaCore.Domain.Entities.TourAgencyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AgencyTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Guias turísticos autônomos e independentes",
                            DisplayOrder = 1,
                            Icon = "user",
                            Name = "Individual"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Agências e operadoras de turismo",
                            DisplayOrder = 2,
                            Icon = "building",
                            Name = "Empresa"
                        });
                });

            modelBuilder.Entity("DukandaCore.Domain.Entities.TourItinerary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TourId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TourId");

                    b.ToTable("TourItineraries");
                });

            modelBuilder.Entity("DukandaCore.Domain.Entities.TourType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TourTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Tours de aventura e esportes radicais",
                            DisplayOrder = 1,
                            Icon = "mountain",
                            Name = "Aventura"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Tours culturais e históricos",
                            DisplayOrder = 2,
                            Icon = "museum",
                            Name = "Cultural"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Experiências gastronômicas locais",
                            DisplayOrder = 3,
                            Icon = "utensils",
                            Name = "Gastronômico"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Tours em parques e reservas naturais",
                            DisplayOrder = 4,
                            Icon = "tree",
                            Name = "Natureza"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Tours em praias e atividades marítimas",
                            DisplayOrder = 5,
                            Icon = "umbrella-beach",
                            Name = "Praia"
                        });
                });

            modelBuilder.Entity("DukandaCore.Domain.Entities.TouristAttraction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uuid");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("TouristAttractions");
                });

            modelBuilder.Entity("DukandaCore.Domain.Identity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("DukandaCore.Domain.Identity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uuid");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DukandaCore.Domain.Identity.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("IdentityRole<Guid>");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8f2bdcde-592c-469c-a258-fc5a4fa39a95"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("2bd1ea02-f706-4db3-9be8-bebad5348089"),
                            Name = "TourAgency",
                            NormalizedName = "TOUR_AGENCY"
                        },
                        new
                        {
                            Id = new Guid("232fe3c4-487d-4b08-b74c-abf32f0be7c3"),
                            Name = "Tourist",
                            NormalizedName = "TOURIST"
                        });
                });

            modelBuilder.Entity("TourTourType", b =>
                {
                    b.Property<int>("TourTypesId")
                        .HasColumnType("integer");

                    b.Property<Guid>("ToursId")
                        .HasColumnType("uuid");

                    b.HasKey("TourTypesId", "ToursId");

                    b.HasIndex("ToursId");

                    b.ToTable("TourTourType");
                });

            modelBuilder.Entity("TourTouristAttraction", b =>
                {
                    b.Property<Guid>("AttractionsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ToursId")
                        .HasColumnType("uuid");

                    b.HasKey("AttractionsId", "ToursId");

                    b.HasIndex("ToursId");

                    b.ToTable("TourTouristAttraction");
                });

            modelBuilder.Entity("DukandaCore.Domain.Entities.AttractionImage", b =>
                {
                    b.HasOne("DukandaCore.Domain.Entities.TouristAttraction", "TouristAttraction")
                        .WithMany("Gallery")
                        .HasForeignKey("TouristAttractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TouristAttraction");
                });

            modelBuilder.Entity("DukandaCore.Domain.Entities.Banner", b =>
                {
                    b.HasOne("DukandaCore.Domain.Entities.BannerType", "BannerType")
                        .WithMany("Banners")
                        .HasForeignKey("BannerTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BannerType");
                });

            modelBuilder.Entity("DukandaCore.Domain.Entities.Benefit", b =>
                {
                    b.HasOne("DukandaCore.Domain.Entities.Package", "Package")
                        .WithMany("Benefits")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Package");
                });

            modelBuilder.Entity("DukandaCore.Domain.Entities.Booking", b =>
                {
                    b.HasOne("DukandaCore.Domain.Entities.BookingStatus", "Status")
                        .WithMany("Bookings")
                        .HasForeignKey("BookingStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DukandaCore.Domain.Entities.Package", "Package")
                        .WithMany("Bookings")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DukandaCore.Domain.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Package");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DukandaCore.Domain.Entities.Package", b =>
                {
                    b.HasOne("DukandaCore.Domain.Entities.Tour", "Tour")
                        .WithMany("Packages")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("DukandaCore.Domain.Entities.Review", b =>
                {
                    b.HasOne("DukandaCore.Domain.Entities.TourAgency", "TourAgency")
                        .WithMany()
                        .HasForeignKey("TourAgencyId");

                    b.HasOne("DukandaCore.Domain.Entities.Tour", null)
                        .WithMany("Reviews")
                        .HasForeignKey("TourId");

                    b.HasOne("DukandaCore.Domain.Entities.TouristAttraction", "TouristAttraction")
                        .WithMany("Reviews")
                        .HasForeignKey("TouristAttractionId");

                    b.HasOne("DukandaCore.Domain.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TourAgency");

                    b.Navigation("TouristAttraction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DukandaCore.Domain.Entities.TodoItem", b =>
                {
                    b.HasOne("DukandaCore.Domain.Entities.TodoList", "List")
                        .WithMany("Items")
                        .HasForeignKey("ListId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("List");
                });

            modelBuilder.Entity("DukandaCore.Domain.Entities.TodoList", b =>
                {
                    b.OwnsOne("DukandaCore.Domain.ValueObjects.Colour", "Colour", b1 =>
                        {
                            b1.Property<Guid>("TodoListId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Code")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("TodoListId");

                            b1.ToTable("TodoList");

                            b1.WithOwner()
                                .HasForeignKey("TodoListId");
                        });

                    b.Navigation("Colour")
                        .IsRequired();
                });

            modelBuilder.Entity("DukandaCore.Domain.Entities.Tour", b =>
                {
                    b.HasOne("DukandaCore.Domain.Entities.TourAgency", "Agency")
                        .WithMany("Tours")
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DukandaCore.Domain.Entities.City", "City")
                        .WithMany("Tours")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DukandaCore.Domain.Identity.User", "PublishedBy")
                        .WithMany()
                        .HasForeignKey("PublishedById");

                    b.Navigation("Agency");

                    b.Navigation("City");

                    b.Navigation("PublishedBy");
                });

            modelBuilder.Entity("DukandaCore.Domain.Entities.TourAgency", b =>
                {
                    b.HasOne("DukandaCore.Domain.Entities.TourAgencyType", "TourAgencyType")
                        .WithMany("Agencies")
                        .HasForeignKey("TourAgencyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DukandaCore.Domain.Identity.User", "User")
                        .WithOne("TourAgency")
                        .HasForeignKey("DukandaCore.Domain.Entities.TourAgency", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TourAgencyType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DukandaCore.Domain.Entities.TourItinerary", b =>
                {
                    b.HasOne("DukandaCore.Domain.Entities.Tour", "Tour")
                        .WithMany("Itineraries")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("DukandaCore.Domain.Entities.TouristAttraction", b =>
                {
                    b.HasOne("DukandaCore.Domain.Entities.City", "City")
                        .WithMany("Attractions")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DukandaCore.Domain.Identity.UserRole", b =>
                {
                    b.HasOne("DukandaCore.Domain.Identity.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DukandaCore.Domain.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TourTourType", b =>
                {
                    b.HasOne("DukandaCore.Domain.Entities.TourType", null)
                        .WithMany()
                        .HasForeignKey("TourTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DukandaCore.Domain.Entities.Tour", null)
                        .WithMany()
                        .HasForeignKey("ToursId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TourTouristAttraction", b =>
                {
                    b.HasOne("DukandaCore.Domain.Entities.TouristAttraction", null)
                        .WithMany()
                        .HasForeignKey("AttractionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DukandaCore.Domain.Entities.Tour", null)
                        .WithMany()
                        .HasForeignKey("ToursId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DukandaCore.Domain.Entities.BannerType", b =>
                {
                    b.Navigation("Banners");
                });

            modelBuilder.Entity("DukandaCore.Domain.Entities.BookingStatus", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("DukandaCore.Domain.Entities.City", b =>
                {
                    b.Navigation("Attractions");

                    b.Navigation("Tours");
                });

            modelBuilder.Entity("DukandaCore.Domain.Entities.Package", b =>
                {
                    b.Navigation("Benefits");

                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("DukandaCore.Domain.Entities.TodoList", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("DukandaCore.Domain.Entities.Tour", b =>
                {
                    b.Navigation("Itineraries");

                    b.Navigation("Packages");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("DukandaCore.Domain.Entities.TourAgency", b =>
                {
                    b.Navigation("Tours");
                });

            modelBuilder.Entity("DukandaCore.Domain.Entities.TourAgencyType", b =>
                {
                    b.Navigation("Agencies");
                });

            modelBuilder.Entity("DukandaCore.Domain.Entities.TouristAttraction", b =>
                {
                    b.Navigation("Gallery");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("DukandaCore.Domain.Identity.User", b =>
                {
                    b.Navigation("TourAgency")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
